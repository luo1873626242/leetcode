两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。

你可以按任意顺序返回答案。

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]
 

提示：

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
只会存在一个有效答案
 

进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？


-------------------------------------------------------------
思路1:暴力两重循环; O(N^2),O(1)
思路2:先排序，再双指针; O(NlogN), O(N)
思路3：hash表，一次循环; O(N), O(N)
使用hash表,go语言实现
对于每个数x,在hashMap中寻找target-x,
如果先通过一次循环构建hashMap, 有可能导致同一个元素使用两次，所以在一次遍历中
边构建hashMap,边寻找target-x,因为找的是一对数字，即使x没找到target-x, target-x也会找到x


延伸：假设二元组不止一个，返回所有可能的情况，如何解决？



